// src/services/ai/openai.js
import OpenAI from "openai";
import { config } from "../../config/index.js";
import logger from "../../utils/logger.js";
import { AppError } from "../../middleware/errorHandler.js";

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API –∫–ª—é—á–∞
if (!config.openai.apiKey) {
  throw new Error(
    "–í—ñ–¥—Å—É—Ç–Ω—ñ–π OpenAI API –∫–ª—é—á. –î–æ–¥–∞–π—Ç–µ –π–æ–≥–æ —É config.js –∞–±–æ .env."
  );
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI SDK
const openai = new OpenAI({
  apiKey: config.openai.apiKey,
});

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é OpenAI
 * @param {string} userQuery - –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {string} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å
 * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
 * @returns {Promise<string>} –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI
 */
export async function generateCompletion(userQuery, context, options = {}) {
  const {
    model = config.openai.completionModel,
    temperature = config.openai.temperature,
    maxTokens = config.openai.maxTokens,
  } = options;

  logger.debug("–ó–∞–ø–∏—Ç –¥–æ OpenAI", { userQuery, model, temperature });

  try {
    if (!userQuery || userQuery.trim() === "") {
      return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è.";
    }

    const systemPrompt = `
    –¢–∏ ‚Äî —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —ó—Ö–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–æ–¥–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –∞–ª–µ —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –¥–∞–Ω–∏—Ö, 
    –Ω–∞–¥–∞–π –∫–æ—Ä–∏—Å–Ω—É –∑–∞–≥–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.

    üìå **–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å:** 
    "${context || "–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"}"

    üéØ **–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏:** 
    - –ó—Ä–æ–∑—É–º—ñ–ª–æ—é —Ç–∞ –ª–æ–≥—ñ—á–Ω–æ—é.
    - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É, —è–∫—â–æ –≤–æ–Ω–∞ –º—ñ—Å—Ç–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–∞–Ω—ñ.
    - –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –ø–æ—è—Å–Ω–∏ —Ç–µ–º—É –∑–∞–≥–∞–ª–æ–º.
    - –ù–µ –≤–∏–≥–∞–¥—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, —è–∫—â–æ –Ω–µ –º–∞—î—à –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.

    ‚ÑπÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ.
    `;

    const completion = await openai.chat.completions.create({
      model,
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userQuery },
      ],
      temperature,
      max_tokens: maxTokens,
    });

    const response =
      completion.choices[0]?.message?.content || "–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞";

    logger.debug("–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI", {
      responseLength: response.length,
      model,
    });

    return response;
  } catch (error) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ OpenAI", { error });

    if (error.response) {
      logger.error("–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏ OpenAI", {
        status: error.response.status,
        data: error.response.data,
      });
    }

    // –û–±—Ä–æ–±–∫–∞ —Ç–∏–ø–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
    if (error.message.includes("401")) {
      throw new AppError("–ù–µ–≤—ñ—Ä–Ω–∏–π API-–∫–ª—é—á OpenAI", 401);
    } else if (error.message.includes("429")) {
      throw new AppError("–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ OpenAI", 429);
    } else if (error.message.includes("500")) {
      throw new AppError("–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ OpenAI", 500);
    }

    throw new AppError(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É: ${error.message}`, 500);
  }
}

export default {
  generateCompletion,
};
