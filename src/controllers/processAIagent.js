// import OpenAI from "openai";
// import { deepseekApiKey } from "./config.js";

// if (!deepseekApiKey) {
//   throw new Error(
//     "–í—ñ–¥—Å—É—Ç–Ω—ñ–π DeepSeek API –∫–ª—é—á. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–Ω –∑–∞–¥–∞–Ω–∏–π —É —Ñ–∞–π–ª—ñ .env"
//   );
// }

// // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI SDK –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è DeepSeek
// const openai = new OpenAI({
//   baseURL: "https://api.deepseek.com",
//   apiKey: deepseekApiKey,
// });

// export async function processAIagent(text) {
//   console.log(text);
//   try {
//     const completion = await openai.chat.completions.create({
//       messages: [{ role: "user", content: text }],
//       model: "deepseek-chat",
//     });

//     return completion.choices[0].message.content;
//   } catch (error) {
//     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É AI DeepSeek:", error.message);
//     return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI.";
//   }
// }

import OpenAI from "openai";
import { openaiApiKey } from "../utils/config.js";

if (!openaiApiKey) {
  throw new Error(
    "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π OpenAI API –∫–ª—é—á. –î–æ–¥–∞–π—Ç–µ –π–æ–≥–æ —É config.js –∞–±–æ .env."
  );
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI SDK –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è GPT-4
const openai = new OpenAI({
  apiKey: openaiApiKey,
});

/**
 * –í–∏–∫–ª–∏–∫–∞—î OpenAI GPT-4 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–∫—Å—Ç—É –∑ ChromaDB —ñ –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 * @param {string} usersAnswer - –í—Ö—ñ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 * @param {string} text - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ ChromaDB.
 * @returns {Promise<string>} - –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI.
 */
export async function processAIagent(usersAnswer, text) {
  console.log(`üì© –ó–∞–ø–∏—Ç –¥–æ OpenAI: ${usersAnswer}`);
  //console.log(`üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑ ChromaDB: ${text}`);

  try {
    if (!usersAnswer || usersAnswer.trim() === "") {
      console.warn("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–∏—Ç–∞–Ω–Ω—è.");
      return "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—Å—Ç–∞–≤—Ç–µ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è.";
    }

    if (!text || text.trim() === "") {
      console.warn("‚ö†Ô∏è ChromaDB –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.");
      return "–ù–∞ –∂–∞–ª—å, —è –Ω–µ –∑–Ω–∞–π—à–æ–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ –±–∞–∑–∏, –∞–ª–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–æ.";
    }

    const prompt = `
    –¢–∏ ‚Äî —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —ó—Ö–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–æ–¥–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å (ChromaDB) –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –∞–ª–µ —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –Ω–∞–¥–∞–π –∫–æ—Ä–∏—Å–Ω—É –∑–∞–≥–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.

    üìå **–ü–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:** 
    "${usersAnswer}"

    üìñ **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑ ChromaDB:** 
    "${text}"

    üéØ **–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏:** 
    - –ó—Ä–æ–∑—É–º—ñ–ª–æ—é —Ç–∞ –ª–æ–≥—ñ—á–Ω–æ—é.
    - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ ChromaDB, —è–∫—â–æ –≤–æ–Ω–∞ –º—ñ—Å—Ç–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–∞–Ω—ñ.
    - –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –ø–æ—è—Å–Ω–∏ —Ç–µ–º—É –∑–∞–≥–∞–ª–æ–º.
    - –ù–µ –≤–∏–≥–∞–¥—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, —è–∫—â–æ –Ω–µ –º–∞—î—à –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.

    ‚ÑπÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ.
    `;

    const completion = await openai.chat.completions.create({
      model: "o3-mini",
      messages: [{ role: "system", content: prompt }],
      temperature: 0.7,
    });

    const aiResponse =
      completion.choices[0]?.message?.content || "–í—ñ–¥–ø–æ–≤—ñ–¥—å AI –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞.";
    console.log(`ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI: ${aiResponse}`);

    return aiResponse;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É OpenAI GPT-4:", error);

    if (error.response) {
      console.error("üì¢ –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ OpenAI:", error.response.data);
    } else if (error.request) {
      console.error("üì¢ –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î.");
    } else {
      console.error("üì¢ –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", error.message);
    }

    if (error.message.includes("401")) {
      return "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π API-–∫–ª—é—á OpenAI. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.";
    } else if (error.message.includes("429")) {
      return "üö® –õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ OpenAI –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.";
    } else if (error.message.includes("500")) {
      return "üõ†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ OpenAI. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.";
    }

    return `‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`;
  }
}
